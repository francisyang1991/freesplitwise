generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String       @id @default(cuid())
  name            String?
  email           String?      @unique
  emailVerified   DateTime?
  image           String?
  role            UserRole     @default(MEMBER)
  memberships     Membership[]
  ownedGroups     Group[]      @relation("GroupOwner")
  expensesCreated Expense[]    @relation("ExpenseCreator")
  accounts        Account[]
  sessions        Session[]
  feedbacks       Feedback[]
  expenseHistory  ExpenseHistory[]
  friendships     Friendship[] @relation("UserFriendships")
  friendsOf       Friendship[] @relation("FriendOf")
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Group {
  id          String       @id @default(cuid())
  name        String
  currency    String       @default("USD")
  description String?
  ownerId     String
  inviteCode  String?      @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  owner       User         @relation("GroupOwner", fields: [ownerId], references: [id])
  memberships Membership[]
  expenses    Expense[]
  settlements Settlement[]
}

model Membership {
  id                String         @id @default(cuid())
  userId            String
  groupId           String
  role              MembershipRole @default(MEMBER)
  joinedAt          DateTime       @default(now())
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  group             Group          @relation(fields: [groupId], references: [id], onDelete: Cascade)
  expensePayers     ExpensePayer[]
  expenseShares     ExpenseShare[]
  settlementsFrom   Settlement[]   @relation("SettlementFrom")
  settlementsTo     Settlement[]   @relation("SettlementTo")

  @@unique([userId, groupId])
}

model Expense {
  id               String         @id @default(cuid())
  groupId          String
  createdById      String
  description      String
  totalAmountCents Int
  currency         String         @default("USD")
  occurredAt       DateTime       @default(now())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  group            Group          @relation(fields: [groupId], references: [id], onDelete: Cascade)
  createdBy        User           @relation("ExpenseCreator", fields: [createdById], references: [id])
  payers           ExpensePayer[]
  shares           ExpenseShare[]
  history          ExpenseHistory[]
}

model ExpensePayer {
  id           String     @id @default(cuid())
  expenseId    String
  membershipId String
  amountCents  Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  expense      Expense    @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  membership   Membership @relation(fields: [membershipId], references: [id], onDelete: Cascade)

  @@unique([expenseId, membershipId])
}

model ExpenseShare {
  id           String     @id @default(cuid())
  expenseId    String
  membershipId String
  weight       Float      @default(1.0)
  amountCents  Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  expense      Expense    @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  membership   Membership @relation(fields: [membershipId], references: [id], onDelete: Cascade)

  @@unique([expenseId, membershipId])
}

model ExpenseHistory {
  id          String   @id @default(cuid())
  expenseId   String
  userId      String
  action      String   // "created", "updated", "deleted"
  changes     Json?    // Store the changes made
  createdAt   DateTime @default(now())
  expense     Expense  @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Settlement {
  id              String         @id @default(cuid())
  groupId         String
  fromMembershipId String
  toMembershipId  String
  amountCents     Int
  currency        String         @default("USD")
  status          SettlementStatus @default(PENDING)
  requestedAt     DateTime?
  paidAt          DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  group           Group          @relation(fields: [groupId], references: [id], onDelete: Cascade)
  fromMember      Membership     @relation("SettlementFrom", fields: [fromMembershipId], references: [id])
  toMember        Membership     @relation("SettlementTo", fields: [toMembershipId], references: [id])

  @@unique([fromMembershipId, toMembershipId])
}

model Feedback {
  id        String   @id @default(cuid())
  userId    String
  message   String
  rating    Int?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Friendship {
  id        String   @id @default(cuid())
  userId    String
  friendId  String
  createdAt DateTime @default(now())
  user      User     @relation("UserFriendships", fields: [userId], references: [id], onDelete: Cascade)
  friend    User     @relation("FriendOf", fields: [friendId], references: [id], onDelete: Cascade)

  @@unique([userId, friendId])
}

enum MembershipRole {
  OWNER
  MEMBER
}

enum UserRole {
  MEMBER
  ADMIN
}

enum SettlementStatus {
  PENDING
  REQUESTED
  PAID
  CANCELLED
}
